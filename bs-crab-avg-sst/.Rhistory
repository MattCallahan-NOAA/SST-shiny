require(httr)
require(tidyverse)
require(lubridate)
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_sst_update?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,ecosystem_sub=ECOSYSTEM_SUB)%>%
#saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS("Data/crabsst.RDS")
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,ecosystem_sub=ECOSYSTEM_SUB)%>%
#saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS("Data/crabsst.RDS")
#  Define the Bering Sea dataset
data<-httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows #%>%
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
#saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS("Data/crabsst.RDS")
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
esr_region=ecosystem_sub,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date)
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date)
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date) %>%
# saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS("Data/crabsst.RDS")
rm(data)
#  Define the Bering Sea dataset
httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date) %>%
# saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS("Data/crabsst.RDS")
#  Define the Bering Sea dataset
data<-httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date) #%>%
# saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS(data, "Data/crabsst.RDS")
rm(data)
# saveRDS("/srv/shiny-server/bs-crab-avg-sst/Data/crabsst.RDS")
saveRDS(data, "data/crabsst.RDS")
data<-readRDS("../crwsst.RDS")
data<-readRDS("../crabsst.RDS")
max(data$date)
# pull crab time series for DOI
crabsst<-httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date)
library(magrittr)
# pull crab time series for DOI
crabsst<-httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date)
# pull crab time series for DOI
library(tidyverse)
crabsst<-httr::content(httr::GET('https://apex.psmfc.org/akfin/data_marts/akmp/bs_crab_avg_sst?start_date=19850101&end_date=20501130'), type = "application/json") %>%
bind_rows %>%
mutate(date=as_date(READ_DATE)) %>%
data.frame %>%
dplyr::select(date,meansst=MEANSST,crabarea=CRAB_AREA)%>%
mutate(read_date=date,
month=month(read_date),
day=day(read_date),
year=year(read_date),
newdate=as.Date(ifelse(month==12,as.character(as.Date(paste("1999",month,day,sep="-"),format="%Y-%m-%d")),#  Create a dummy year so that each year can more easily be overlain
as.character(as.Date(paste("2000",month,day,sep="-"),format="%Y-%m-%d"))),format("%Y-%m-%d")),
year2=ifelse(month==12,year+1,year)) %>% # To have our years go from Dec-Nov, force December to be part of the subsequent year.
arrange(read_date)
install.packages("zen4R")
library(zen4R)
# test function
zenodo <- ZenodoManager$new(
token = matttoken,
logger = "INFO" # use "DEBUG" to see detailed API operation logs, use NULL if you don't want logs at all
)
# interact with zenodo
matttoken<-"p3kfWM5mPYgJAAETiHkXnoFgv1vO8ynXfoHtZS19Zpp3lqz0rXgGBg4l3SqV"
# test function
zenodo <- ZenodoManager$new(
token = matttoken,
logger = "INFO" # use "DEBUG" to see detailed API operation logs, use NULL if you don't want logs at all
)
# pull my depositions, should be none...
my_zenodo_records <- zenodo$getDepositions()
# try to create a new record
myrec <- zenodo$createEmptyRecord()
# pull my depositions, should be none...
my_zenodo_records <- zenodo$getDepositions()
View(my_zenodo_records)
# populate it
myrec <- ZenodoRecord$new()
myrec$setTitle("Average SST for Bering Sea crab management areas")
myrec$setDescription("A time series of average sea surface temperature for crab managemnet Areas in the Bering Sea. Crab Management area boundaries were obtained from Erin Fedewa (AFSC) and Brett Holycross (PSMFC). SST product was NOAA coral reef watch 5k resolution. Data processing and downloading was done on the AKFIN database. See https://github.com/MattCallahan-NOAA/SST-shiny")
myrec$setUploadType("data")
myrec$setUploadType("dataset")
myrec$addCreator(firstname = "Matt", lastname = "Callahan", affiliation = "AKFIN", orcid = "0000-0001-9217-5446")
myrec$setLicense("mit")
#myrec$setLicense("mit")
myrec$setAccessRight("open")
#myrec$setDOI("mydoi") #use this method if your DOI has been assigned elsewhere, outside Zenodo
myrec$addCommunity("psmfcfin")
myrec <- zenodo$depositRecord(myrec)
my_zenodo_records <- zenodo$getDepositions()
View(my_zenodo_records)
# pull my depositions, should be none...
my_zenodo_records <- zenodo$getDepositions()
View(myrec)
